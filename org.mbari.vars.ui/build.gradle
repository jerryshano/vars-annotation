plugins {
    id "application"
    id "org.openjfx.javafxplugin" version "0.0.8"
    id "org.beryx.jlink" version "2.12.0"
}

dependencies {
    compile project(':org.mbari.vars.javafx')
    compile project(':org.mbari.vars.services')

    implementation 'com.google.guava:guava'
    implementation 'com.google.inject:guice'
    implementation 'com.jfoenix:jfoenix'
    implementation 'com.typesafe:config'
    implementation 'eu.hansolo:Medusa'
    implementation 'io.reactivex.rxjava2:rxjava'
    implementation 'io.reactivex.rxjava2:rxjavafx'
    implementation 'org.controlsfx:controlsfx'
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation 'org.kordamp.ikonli:ikonli-material-pack'
    implementation 'org.mbari:mbarix4j'
    implementation 'org.mbari.vars:vars-avfoundation'
    implementation 'org.mbari.vcr4j:vcr4j-core'
    implementation 'org.mbari.vcr4j:vcr4j-jserialcomm'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda'
    implementation 'org.slf4j:slf4j-api'

    implementation('org.mbari.m3:vars-blackmagic') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    implementation('org.mbari.vcr4j:vcr4j-ui') {
        exclude group: 'org.mbari.vcr4j', module: 'vcr4j-v2-adapter'
    }

    runtimeOnly 'ch.qos.logback:logback-classic'
    runtimeOnly 'javax.servlet:javax.servlet-api'
}

javafx {
    version = "11.0.2"
    modules = [
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics'
    ]
}

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix'
]

application {
    mainClassName = "org.mbari.vars.ui/org.mbari.m3.vars.annotation.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}
//applicationDefaultJvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED']
jlink {
    imageZip = file("$buildDir/image-zip/vars-annotation.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'vars-annotation'
        jvmArgs = runtimeJvmArgs
    }

}