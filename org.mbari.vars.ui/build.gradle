plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version "0.0.8"
    id 'org.beryx.jlink' version "2.14.0"
}

dependencies {
    compile project(':org.mbari.vars.core')
//    compile project(':org.mbari.vars.javafx')
    compile project(':org.mbari.vars.services')

    implementation 'com.google.guava:guava'
    implementation 'com.google.inject:guice'
    implementation 'com.jfoenix:jfoenix'
    implementation 'com.typesafe:config'
    implementation 'io.reactivex.rxjava2:rxjava'
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation 'org.kordamp.ikonli:ikonli-material-pack'
    implementation 'org.mbari.vars:vars-avfoundation'
    implementation 'org.mbari.vcr4j:vcr4j-core'
    implementation 'org.mbari.vcr4j:vcr4j-jserialcomm'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda'
    implementation 'org.mbari:mbarix4j'
    implementation 'org.slf4j:slf4j-api'

    implementation('io.reactivex.rxjava2:rxjavafx') {
        exclude group: 'org.openjfx', module: 'javafx-base'
        exclude group: 'org.openjfx', module: 'javafx-controls'
        exclude group: 'org.openjfx', module: 'javafx-graphics'
        because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
    }

    implementation('org.controlsfx:controlsfx') {
        exclude group: 'org.openjfx', module: 'javafx-base'
        exclude group: 'org.openjfx', module: 'javafx-controls'
        exclude group: 'org.openjfx', module: 'javafx-graphics'
        because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
    }

    implementation('org.mbari.m3:vars-blackmagic') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        because("Do not want this slf4j provider included on classpath")
    }

    runtimeOnly 'ch.qos.logback:logback-classic'
    runtimeOnly 'javax.servlet:javax.servlet-api'
}

javafx {
    version = "11.0.2"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics'
    ]
}

/* *****************************************************************************
  These runtime args are shared by several tasks. We add many env params that
  configure values defined in reference.conf. Note that the conf params will
  only be added to the launchers IF they are defined in the system env at
  build time
 */

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix'
]

// If any o these exist as enironment vairables add them as -Dkey=value to jvmArgs
def confEnvParams = [
        "ACCOUNTS_SERVICE_URL",
        "ACCOUNTS_SERVICE_TIMEOUT",
        "ACCOUNTS_SERVICE_CLIENT_SECRET",
        "ANNOTATION_SERVICE_URL",
        "ANNOTATION_SERVICE_TIMEOUT",
        "ANNOTATION_SERVICE_CLIENT_SECRET",
        "ANNOTATION_SERVICE_PAGING",
        "ANNOTATION_SERVICE_PAGE_COUNT",
        "ANNOTATION_SERVICE_V2_URL",
        "APP_IMAGE_COPYRIGHT_OWNER",
        "CONCEPT_SERVICE_URL",
        "CONCEPT_SERVICE_TIMEOUT",
        "CONCEPT_SERVICE_TEMPLATE_FILTERS",
        "MEDIA_SERVICE_URL",
        "MEDIA_SERVICE_TIMEOUT",
        "MEDIA_SERVICE_CLIENT_SECRET",
        "PANOPTES_SERVICE_URL",
        "PANOPTES_SERVICE_TIMEOUT",
        "PANOPTES_SERVICE_CLIENT_SECRET",
        "PREFERENCES_SERVICE_URL",
        "PREFERENCES_SERVICE_TIMEOUT",
        "PREFERENCES_SERVICE_CLIENT_SECRET",
        "SHARKTOPODA_DEFAULTS_CONTROL_PORT",
        "SHARKTOPODA_DEFAULTS_FRAMEGRAB_PORT"
]
confEnvParams.each { k ->
    def v = System.getenv(k)
    if (v) {
        runtimeJvmArgs.add("-D${k}=${v}")
    }
}



/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
application {
    mainClassName = "org.mbari.vars.ui/org.mbari.vars.ui.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}


jlink {
    imageZip = file("$buildDir/image-zip/vars-annotation.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'VARS Annotation'
        jvmArgs = runtimeJvmArgs
    }


    jpackage {
        jpackageHome = System.getenv("JPACKAGE_HOME")

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
            installerOptions = [
                    "--identifier", project.name
            ]
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
        }
        else {
            installerType = "dmg"
            installerOptions = [
                    "--identifier", project.name,
                    "--mac-bundle-name", "VARS Annotation"
            ]
        }

    }

}