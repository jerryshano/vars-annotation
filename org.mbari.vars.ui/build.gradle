plugins {
    id 'application'
    id 'org.openjfx.javafxplugin'
    id 'org.beryx.jlink'
}

dependencies {
    implementation project(':org.mbari.vars.core')
    implementation project(':org.mbari.vars.services')

    implementation 'com.jfoenix:jfoenix'
    implementation 'com.typesafe:config'
    implementation 'io.reactivex.rxjava2:rxjava'
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation 'org.kordamp.ikonli:ikonli-material-pack'
    implementation 'org.mbari.vars:vars-avfoundation'
    implementation 'org.mbari.vcr4j:vcr4j-core'
    implementation 'org.mbari.vcr4j:vcr4j-jserialcomm'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda'
    implementation 'org.mbari:mbarix4j'
    implementation 'org.slf4j:slf4j-api'

    implementation('com.google.inject:guice') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
    }

    implementation('io.reactivex.rxjava2:rxjavafx') {
        exclude group: 'org.openjfx', module: 'javafx-base'
        exclude group: 'org.openjfx', module: 'javafx-controls'
        exclude group: 'org.openjfx', module: 'javafx-graphics'
        because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
    }

    implementation('org.controlsfx:controlsfx') {
        exclude group: 'org.openjfx', module: 'javafx-base'
        exclude group: 'org.openjfx', module: 'javafx-controls'
        exclude group: 'org.openjfx', module: 'javafx-graphics'
        because("If not excluded we end up with both mac and linux javafx jars which cause jlink to fail")
    }

//    implementation('org.mbari.m3:vars-blackmagic') {
//        exclude group: 'org.slf4j', module: 'slf4j-simple'
//        because("Do not want this slf4j provider included on classpath")
//    }

    runtimeOnly('ch.qos.logback:logback-classic') {
        exclude group: 'javax.activation'
    }
    runtimeOnly 'javax.servlet:javax.servlet-api'

    // For command line comment out runtime and add implementation so we see log output.
//    runtimeOnly 'org.slf4j:slf4j-jdk14'
//    implementation 'org.slf4j:slf4j-jdk14'
//    runtimeOnly 'com.fazecast:jSerialComm'
}

javafx {
    version = javafxVersion
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics'
    ]
}


/* *****************************************************************************
  These runtime args are shared by several tasks. We add many env params that
  configure values defined in reference.conf. Note that the conf params will
  only be added to the launchers IF they are defined in the system env at
  build time
 */

def runtimeJvmArgs = [
        '-Xms1g',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix',
        '--add-reads', 'vars.annotation.merged.module=org.slf4j'
]

// If any of these exist as environment variables add them as -Dkey=value to jvmArgs
def confEnvParams = [
        "ACCOUNTS_SERVICE_URL",
        "ACCOUNTS_SERVICE_TIMEOUT",
        "ACCOUNTS_SERVICE_CLIENT_SECRET",
        "ANNOTATION_SERVICE_URL",
        "ANNOTATION_SERVICE_TIMEOUT",
        "ANNOTATION_SERVICE_CLIENT_SECRET",
        "ANNOTATION_SERVICE_PAGING",
        "ANNOTATION_SERVICE_PAGE_COUNT",
        "ANNOTATION_SERVICE_V2_URL",
        "APP_IMAGE_COPYRIGHT_OWNER",
        "CONCEPT_SERVICE_URL",
        "CONCEPT_SERVICE_TIMEOUT",
        "CONCEPT_SERVICE_TEMPLATE_FILTERS",
        "MEDIA_SERVICE_URL",
        "MEDIA_SERVICE_TIMEOUT",
        "MEDIA_SERVICE_CLIENT_SECRET",
        "PANOPTES_SERVICE_URL",
        "PANOPTES_SERVICE_TIMEOUT",
        "PANOPTES_SERVICE_CLIENT_SECRET",
        "PREFERENCES_SERVICE_URL",
        "PREFERENCES_SERVICE_TIMEOUT",
        "PREFERENCES_SERVICE_CLIENT_SECRET",
        "SHARKTOPODA_DEFAULTS_CONTROL_PORT",
        "SHARKTOPODA_DEFAULTS_FRAMEGRAB_PORT"
]
confEnvParams.each { k ->
    def v = System.getenv(k)
    if (v) {
        runtimeJvmArgs.add("-D${k}=${v}")
    }
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        def debugJvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
        debugJvmArgs.addAll(runtimeJvmArgs)
        jvmArgs(debugJvmArgs)
    }
}

/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
application {
    mainClassName = "org.mbari.vars.ui/org.mbari.vars.ui.App"
    applicationDefaultJvmArgs = runtimeJvmArgs
}


jlink {
    imageZip = file("$buildDir/image-zip/vars-annotation.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'VARS Annotation'
        jvmArgs = runtimeJvmArgs
    }

    jpackage {
        jpackageHome = System.getenv("JPACKAGE_HOME")

        def customInstallerOptions = [
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--vendor", "org.mbari",
                "--app-version", project.version
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                "--mac-package-name", "VARS Annotation",
                "--mac-package-identifier", project.name
            ])
        }
        installerOptions = customInstallerOptions

    }

}
